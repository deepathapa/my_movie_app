{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movieapp\\\\moviewebsite\\\\src\\\\Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactPaginate from \"react-paginate\"; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 26\n    }, this))\n  }, void 0, false);\n}\n\n_c = Items;\nexport default function PaginatedItems(_ref2) {\n  _s();\n\n  let {\n    itemsPerPage\n  } = _ref2;\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n} // Add a <div id=\"container\"> to your HTML to see the componend rendered.\n\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c2 = PaginatedItems;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"names":["React","useEffect","useState","ReactPaginate","items","Items","currentItems","map","item","PaginatedItems","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"sources":["D:/Movieapp/moviewebsite/src/Pagination.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\n// Example items, to simulate fetching from another resources.\r\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\r\nfunction Items({ currentItems }) {\r\n     return (\r\n          <>\r\n               {currentItems &&\r\n                    currentItems.map((item) => (\r\n                         <div>\r\n                              <h3>Item #{item}</h3>\r\n                         </div>\r\n                    ))}\r\n          </>\r\n     );\r\n}\r\n\r\nexport default function PaginatedItems({ itemsPerPage }) {\r\n     // We start with an empty list of items.\r\n     const [currentItems, setCurrentItems] = useState(null);\r\n     const [pageCount, setPageCount] = useState(0);\r\n     // Here we use item offsets; we could also use page offsets\r\n     // following the API or data you're working with.\r\n     const [itemOffset, setItemOffset] = useState(0);\r\n\r\n     useEffect(() => {\r\n          // Fetch items from another resources.\r\n          const endOffset = itemOffset + itemsPerPage;\r\n          console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n          setCurrentItems(items.slice(itemOffset, endOffset));\r\n          setPageCount(Math.ceil(items.length / itemsPerPage));\r\n     }, [itemOffset, itemsPerPage]);\r\n\r\n     // Invoke when user click to request another page.\r\n     const handlePageClick = (event) => {\r\n          const newOffset = (event.selected * itemsPerPage) % items.length;\r\n          console.log(\r\n               `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n          );\r\n          setItemOffset(newOffset);\r\n     };\r\n\r\n     return (\r\n          <>\r\n               <Items currentItems={currentItems} />\r\n               <ReactPaginate\r\n                    breakLabel='...'\r\n                    nextLabel='next >'\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={5}\r\n                    pageCount={pageCount}\r\n                    previousLabel='< previous'\r\n                    renderOnZeroPageCount={null}\r\n               />\r\n          </>\r\n     );\r\n}\r\n\r\n// Add a <div id=\"container\"> to your HTML to see the componend rendered.\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B,C,CAEA;;;;AACA,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,CAAd;;AAEA,SAASC,KAAT,OAAiC;EAAA,IAAlB;IAAEC;EAAF,CAAkB;EAC5B,oBACK;IAAA,UACMA,YAAY,IACRA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACZ;MAAA,uBACK;QAAA,qBAAWA,IAAX;MAAA;QAAA;QAAA;QAAA;MAAA;IADL;MAAA;MAAA;MAAA;IAAA,QADL;EAFV,iBADL;AAUJ;;KAXQH,K;AAaT,eAAe,SAASI,cAAT,QAA0C;EAAA;;EAAA,IAAlB;IAAEC;EAAF,CAAkB;EACpD;EACA,MAAM,CAACJ,YAAD,EAAeK,eAAf,IAAkCT,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C,CAHoD,CAIpD;EACA;;EACA,MAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,CAAD,CAA5C;EAEAD,SAAS,CAAC,MAAM;IACX;IACA,MAAMe,SAAS,GAAGF,UAAU,GAAGJ,YAA/B;IACAO,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;IACAL,eAAe,CAACP,KAAK,CAACe,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;IACAH,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUjB,KAAK,CAACkB,MAAN,GAAeZ,YAAzB,CAAD,CAAZ;EACJ,CANQ,EAMN,CAACI,UAAD,EAAaJ,YAAb,CANM,CAAT,CARoD,CAgBpD;;EACA,MAAMa,eAAe,GAAIC,KAAD,IAAW;IAC9B,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBhB,YAAlB,GAAkCN,KAAK,CAACkB,MAA1D;IACAL,OAAO,CAACC,GAAR,CACM,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EADhF;IAGAV,aAAa,CAACU,SAAD,CAAb;EACJ,CAND;;EAQA,oBACK;IAAA,wBACK,QAAC,KAAD;MAAO,YAAY,EAAEnB;IAArB;MAAA;MAAA;MAAA;IAAA,QADL,eAEK,QAAC,aAAD;MACK,UAAU,EAAC,KADhB;MAEK,SAAS,EAAC,QAFf;MAGK,YAAY,EAAEiB,eAHnB;MAIK,kBAAkB,EAAE,CAJzB;MAKK,SAAS,EAAEX,SALhB;MAMK,aAAa,EAAC,YANnB;MAOK,qBAAqB,EAAE;IAP5B;MAAA;MAAA;MAAA;IAAA,QAFL;EAAA,gBADL;AAcJ,C,CAED;;GAzCwBH,c;;MAAAA,c"},"metadata":{},"sourceType":"module"}